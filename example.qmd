---
title: "Assignment-2"
author: "Dhruvin Modh"
format:
  html:
    theme: cerulean
    echo: false
  pdf:
    theme: metropolis
    echo: false
editor: visual
---

This is a different change added on main branch to create a conflict.

This line was added on testbranch to practice branching.

## Introduction

This guide provides a step-by-step demonstration of collaborative and reproducible workflows using Git, GitHub, the command-line interface, and Quarto in RStudio.

## 1 - Creation of a RStudio Project

To begin the assignment, I started by setting up a new RStudio project. I did this by going to File \> New Project \> New Directory. I named the project ETC5513-Assignment-2.

Once my project folder was ready, I created a Quarto document. I set HTML as the output format and typed my name as the author. I basically didn’t make any other changes because the goal here was just to check if I could knit it properly.

```{r}
knitr::include_graphics("Images/qmd_setup.png")
```

I saved this document as example.qmd, clicked Render, and it successfully rendered into example.html.

```{r}
knitr::include_graphics("Images/knitted_file.png")
```

## 2 - Initialising Git Repository and Push to GitHub

After setting up my Quarto document, I moved on to version control setup using Git. And once i had my local repository ready, I logged in to GitHub and created a new repo called ETC5513-Assignment-2.

I used these commands for connecting to git repo. - git remote add origin - git branch -M main - git push -u origin main

After that I checked my GitHub repo and saw that all my files had appeared there. This confirmed that my initial commit was now pushed successfully.

```{r}
knitr::include_graphics("Images/repo_push_ss.png")
```

## 3 - Creating testbranch, Editing of example.qmd, and Push to GitHub

After completing my push on the main branch, I created a new branch called testbranch using git *checkout -b testbranch* command.

```{r}
knitr::include_graphics("Images/testbranch_ss.png")
```

Then, I opened example.qmd and added this line just below my qmd setup:

“This line was added on testbranch to practice branching.”

After that, I pushed test branch to GitHub and confirmed that new line was added in the qmd file.

```{r}
knitr::include_graphics("Images/testbranch_update.png")
```

## 4 - Adding Data Folder and Amend Commiting it on testbranch

With my testbranch pushed, I moved on to adding the data folder required for this assignment.

I created a new folder named data in my project and placed my Assignment 1 files inside it.

After adding the folder, I staged it. And instead of making a new commit, I amended my last commit to include the data folder. I then force pushed this amended commit to GitHub using these commands :

*git add data* *git commit --amend --no-edit* *git push --force*

I thereafter visited GitHub, switched to testbranch, and confirmed that the data folder was now visible online.

```{r}
knitr::include_graphics("Images/data_folder.png")
```
## 5 - Creating Conflict on Main Branch

After finishing my work on testbranch, I switched back to main to set up a conflict. Once i was on main branch, I opened example.qmd and added a different line just below my task 1 explanation:

“This is a different change added on main branch to create a conflict.”

Then I saved the file, staged, and committed and pushed it to GitHub and confirmed that my change is visible.

```{r}
knitr::include_graphics("Images/main_branch_conflict.png")
```

## 6 - Merging testbranch into main and Resolving Conflict

Starting the Merge After completing changes on both main and testbranch, I started the merging process to bring them together. I began by running the following command on main:

*git merge testbranch*

Git identified a merge conflict in example.qmd. I opened the file in RStudio and found the conflict markers showing the two different edits:

```{r}
knitr::include_graphics("Images/conflict_markers.png")
```

Then I resolved the conflict by keeping both lines and removing the conflict markers and pushed it on GitHub.

```{r}
knitr::include_graphics("Images/conflict_resolved.png")
```

I checked my GitHub repository, switched to main, and confirmed that the resolved file was visible.

```{r}
knitr::include_graphics("Images/after_merge_ss.png")
```

## 7 - Tagging the Commit on Main Branch

After confirming the merge was successful, I added a version tag to mark this as version v1.0. This helps identify the state of the project at this stage. I ran the following command on main to add an annotated tag:

*git tag -a v1.0 -m "First stable version after conflict resolution"*

After creating the tag, I pushed it to GitHub

```{r}
knitr::include_graphics("Images/v1.0_tag.png")
```

## 8 - Deleting testbranch Locally and on GitHub

Since the purpose of testbranch was completed, I cleaned up by deleting it locally to avoid unnecessary clutter. I ran the following command:

*git branch -d testbranch*

I also removed testbranch from GitHub using the following command:

*git push origin --delete testbranch*

I refreshed the branches list on GitHub to confirm that testbranch no longer appeared in the branch list.

```{r}
knitr::include_graphics("Images/delete_branch.png")
```

## 9 - Displaying Commit Log in Condensed Form

To demonstrate my project’s commit history, I displayed the log in condensed one-line format using:

*git log --oneline*

This view showed a short summary of all commits, including:

```{r}
knitr::include_graphics("Images/commit_log.png")
```

## 10 - Adding a Plot and Undoing the Commit

```{r}
#| echo: false

cars <- c(1, 3, 6, 4, 9)
barplot(cars)
```


For the final task, I opened example.qmd and added a R plot section to demonstrate additional changes.

I saved the file, staged the change, and made a new commit.

To show how to undo a commit while keeping the changes,
I performed a soft reset using:

*git reset --soft HEAD~1*

This command removed the commit from history,
but kept the changes locally so I could continue working on them.
This is useful when you realise you need to adjust something before finalising a commit.  

I ran *git status* to check that example.qmd still showed as modified.
```{r}
knitr::include_graphics("Images/undo_commit.png")
```

